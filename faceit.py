import os
import asyncio
import aiohttp
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# ==== –ö–û–ù–§–ò–ì ====
DATABASE_URL = os.getenv("DATABASE_URL")  # –í Railway —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ç–≤–æ–∏–º connection string
FACEIT_API_KEY = "5929d726-8eb2-482b-9ca8-b4f5f1fbd13f"
TELEGRAM_TOKEN = "8054498045:AAG6dXSRgz6D1LeDqt7PjMZcTYIGfHan80U"

pool = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ (—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É players –≤—Ä—É—á–Ω—É—é –Ω–∞ Railway!) ====


async def create_pool():
    global pool
    pool = await asyncpg.create_pool(DATABASE_URL)


# ==== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô ====

async def get_players(chat_id: str):
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT nickname, player_id, elo FROM players WHERE chat_id=$1", chat_id)
        return {row['nickname']: {'id': row['player_id'], 'elo': row['elo']} for row in rows}


async def add_or_update_player(chat_id, nickname, player_id, elo):
    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO players(chat_id, nickname, player_id, elo) 
            VALUES($1, $2, $3, $4)
            ON CONFLICT (chat_id, nickname) DO UPDATE 
            SET player_id=EXCLUDED.player_id, elo=EXCLUDED.elo
        """, chat_id, nickname, player_id, elo)


async def remove_player(chat_id, nickname):
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM players WHERE chat_id=$1 AND nickname=$2", chat_id, nickname)


# ==== FACEIT API ====

async def get_player_data(nickname, session=None):
    url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}

    own_session = False
    if session is None:
        session = aiohttp.ClientSession()
        own_session = True

    async with session.get(url, headers=headers) as resp:
        if resp.status != 200:
            if own_session:
                await session.close()
            return None, None
        data = await resp.json()

    cs2_data = data.get("games", {}).get("cs2")
    if not cs2_data:
        if own_session:
            await session.close()
        return None, None

    if own_session:
        await session.close()

    return data.get("player_id"), cs2_data.get("faceit_elo")


async def get_current_elo(session, player_id):
    url = f"https://open.faceit.com/data/v4/players/{player_id}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}
    async with session.get(url, headers=headers) as resp:
        if resp.status != 200:
            return None
        data = await resp.json()
        return data.get("games", {}).get("cs2", {}).get("faceit_elo")


async def get_elo_by_id(session, player_id):
    return await get_current_elo(session, player_id)


# ==== –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        keyboard = [
            [InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{context.bot.username}?startgroup=true")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Faceit ELO.\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–≥—Ä–æ–∫–æ–≤.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ø–µ—Ä—å —Å–ª–µ–∂—É –∑–∞ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!\n\n"
            "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤: /register –Ω–∏–∫"
        )


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ö† –£–∫–∞–∂–∏ –Ω–∏–∫–Ω–µ–π–º: /register <–Ω–∏–∫>")
        return

    nickname = context.args[0]

    player_id, elo = await get_player_data(nickname)
    if not player_id:
        await update.message.reply_text("üö´ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç CS2 –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    await add_or_update_player(chat_id, nickname, player_id, elo)
    await update.message.reply_text(f"‚úÖ {nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫. üéØ {elo} ELO")


async def unregister(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /unregister nickname")
        return
    nickname = context.args[0]
    chat_id = str(update.effective_chat.id)

    players = await get_players(chat_id)
    if nickname not in players:
        await update.message.reply_text(f"üö´ {nickname} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        return

    await remove_player(chat_id, nickname)
    await update.message.reply_text(f"üóë {nickname} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    players = await get_players(chat_id)

    if not players:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    msg_lines = ["\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"]

    async with aiohttp.ClientSession() as session:
        tasks = []
        players_list = list(players.items())

        for nickname, pdata in players_list:
            tasks.append(get_current_elo(session, pdata["id"]))

        elos = await asyncio.gather(*tasks)

    players_with_elo = []
    for (nickname, pdata), current_elo in zip(players_list, elos):
        if current_elo is None:
            continue
        players_with_elo.append((nickname, current_elo, pdata["elo"]))

    players_with_elo.sort(key=lambda x: x[1], reverse=True)

    for i, (nickname, current_elo, prev_elo) in enumerate(players_with_elo, start=1):
        change = current_elo - prev_elo
        sign = "+" if change > 0 else ""
        msg_lines.append(f"{i}. {nickname} ‚Äî {current_elo} ELO ({sign}{change})")
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await add_or_update_player(chat_id, nickname, players[nickname]["id"], current_elo)

    await update.message.reply_text("\n".join(msg_lines))


# ==== –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π ELO ====
async def check_elo_changes(app):
    while True:
        chats = await get_all_chats()
        changed_chats = {}

        async with aiohttp.ClientSession() as session:
            tasks = []
            player_map = []

            for chat_id in chats:
                players = await get_players(chat_id)
                for nickname, pdata in players.items():
                    tasks.append(get_elo_by_id(session, pdata["id"]))
                    player_map.append((chat_id, nickname, pdata["elo"]))

            results = await asyncio.gather(*tasks)

        for (chat_id, nickname, prev_elo), elo in zip(player_map, results):
            if elo is not None and elo != prev_elo:
                if chat_id not in changed_chats:
                    changed_chats[chat_id] = []
                changed_chats[chat_id].append((nickname, elo, elo - prev_elo))
                await add_or_update_player(chat_id, nickname, pdata["id"], elo)

        for chat_id, changes in changed_chats.items():
            msg_lines = ["üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ELO:\n"]
            for i, (nickname, elo, change) in enumerate(sorted(changes, key=lambda x: x[1], reverse=True), start=1):
                sign = "+" if change > 0 else ""
                msg_lines.append(f"{i}. {nickname} ‚Äî {elo} ({sign}{change})")
            try:
                await app.bot.send_message(chat_id=int(chat_id), text="\n".join(msg_lines))
            except Exception:
                pass

        await asyncio.sleep(10)


async def get_all_chats():
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT DISTINCT chat_id FROM players")
        return [row['chat_id'] for row in rows]


# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====

async def main():
    await create_pool()

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("unregister", unregister))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π ELO
    asyncio.create_task(check_elo_changes(app))

    await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    import asyncio
    asyncio.run(main())
