import json
import os
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import CallbackQueryHandler
from telegram.ext import Application, MessageHandler, filters
import asyncio
import aiohttp

# ==== –ö–û–ù–§–ò–ì ====
FACEIT_API_KEY = "5929d726-8eb2-482b-9ca8-b4f5f1fbd13f"
TELEGRAM_TOKEN = "8054498045:AAG6dXSRgz6D1LeDqt7PjMZcTYIGfHan80U"
DATA_FILE = "players.json"

# ==== –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï ====
def load_players():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_players(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ==== FACEIT API ====


async def get_faceit_stats(session, nickname, player_id=None):
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}

    # –ï—Å–ª–∏ player_id –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî –∏—â–µ–º –µ–≥–æ
    if not player_id:
        user_url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
        async with session.get(user_url, headers=headers) as resp:
            user_data = await resp.json()

        if "player_id" not in user_data or "cs2" not in user_data.get("games", {}):
            return nickname, None, None

        player_id = user_data["player_id"]

    # –ü–æ–ª—É—á–∞–µ–º ELO
    player_url = f"https://open.faceit.com/data/v4/players/{player_id}"
    async with session.get(player_url, headers=headers) as resp:
        player_data = await resp.json()

    if "cs2" not in player_data.get("games", {}):
        return nickname, None, None

    elo = player_data["games"]["cs2"]["faceit_elo"]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á
    matches_url = f"https://open.faceit.com/data/v4/players/{player_id}/history?game=cs2&limit=1"
    async with session.get(matches_url, headers=headers) as resp:
        matches_data = await resp.json()

    if not matches_data.get("items"):
        return nickname, elo, None

    last_match_id = matches_data["items"][0]["match_id"]

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ELO
    match_url = f"https://open.faceit.com/data/v4/matches/{last_match_id}"
    async with session.get(match_url, headers=headers) as resp:
        match_data = await resp.json()

    elo_diff = None
    for team in match_data.get("teams", {}).values():
        for player in team.get("players", []):
            if player["nickname"].lower() == nickname.lower():
                elo_diff = int(player["player_stats"].get("elo_change", 0))
                break

    return nickname, elo, elo_diff

# ==== /start ====


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        keyboard = [
            [InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{context.bot.username}?startgroup=true")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Faceit ELO.\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–≥—Ä–æ–∫–æ–≤.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–µ–ø–µ—Ä—å —Å–ª–µ–∂—É –∑–∞ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!\n"
                                        "\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤: /register –Ω–∏–∫")

# ==== /register ====
# ==== /register ====
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)

    if not context.args:
        await update.message.reply_text("‚ö† –£–∫–∞–∂–∏ –Ω–∏–∫–Ω–µ–π–º: /register <–Ω–∏–∫>")
        return

    nickname = context.args[0]
    # —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç player_id, elo, cs2_id
    player_data = await get_player_data(nickname)

    if not player_data:
        await update.message.reply_text("üö´ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    player_id, elo = player_data
    if player_id is None:
        await update.message.reply_text("üö´ –£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç CS2 –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    data = load_players()
    if chat_id not in data:
        data[chat_id] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ ELO
    data[chat_id][nickname] = {
        "id": player_id,
        "elo": elo
    }
    save_players(data)

    await update.message.reply_text(f"‚úÖ {nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫. üéØ {elo} ELO")

async def get_current_elo(session, player_id):
    url = f"https://open.faceit.com/data/v4/players/{player_id}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}
    async with session.get(url, headers=headers) as resp:
        if resp.status != 200:
            return None
        data = await resp.json()
        return data.get("games", {}).get("cs2", {}).get("faceit_elo")

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ player_id + ELO –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º ====
async def get_player_data(nickname):
    url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            if resp.status != 200:
                return None
            data = await resp.json()

    cs2_id = None
    for game in data.get("games", {}):
        if game == "cs2":
            cs2_id = data["games"][game]["game_player_id"]

    if not cs2_id:
        return None  # –Ω–µ—Ç CS2

    return data["player_id"], data["games"]["cs2"]["faceit_elo"]


# ==== /unregister ====
async def unregister(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /unregister nickname")
        return
    nickname = context.args[0]
    chat_id = str(update.effective_chat.id)

    data = load_players()
    if chat_id not in data or nickname not in data[chat_id]:
        await update.message.reply_text(f"üö´ {nickname} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        return

    del data[chat_id][nickname]
    save_players(data)
    await update.message.reply_text(f"üóë {nickname} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

# ==== /stats ====
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    data = load_players()

    if chat_id not in data or not data[chat_id]:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    msg_lines = ["\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"]

    async with aiohttp.ClientSession() as session:
        tasks = []
        players_list = list(data[chat_id].items())  # [(nickname, pdata), ...]

        for nickname, pdata in players_list:
            tasks.append(get_current_elo(session, pdata["id"]))

        elos = await asyncio.gather(*tasks)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (nickname, elo, prev_elo)
    players_with_elo = []
    for (nickname, pdata), current_elo in zip(players_list, elos):
        players_with_elo.append((nickname, current_elo, pdata["elo"]))

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç —ç–ª–æ (None) - –ø–æ –∂–µ–ª–∞–Ω–∏—é
    players_with_elo = [p for p in players_with_elo if p[1] is not None]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É elo –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    players_with_elo.sort(key=lambda x: x[1], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for i, (nickname, current_elo, prev_elo) in enumerate(players_with_elo, start=1):
        change = current_elo - prev_elo
        sign = "+" if change > 0 else ""
        msg_lines.append(f"{i}. {nickname} ‚Äî {current_elo} ELO ({sign}{change})")
        data[chat_id][nickname]["elo"] = current_elo  # –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ

    save_players(data)

    await update.message.reply_text("\n".join(msg_lines))

# ==== –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π ELO ====
async def check_elo_changes(app):
    while True:
        data = load_players()
        changed_chats = {}

        async with aiohttp.ClientSession() as session:
            tasks = []
            player_map = []

            for chat_id, players in data.items():
                for nickname, pdata in players.items():
                    tasks.append(get_elo_by_id(session, pdata["id"]))
                    player_map.append((chat_id, nickname, pdata["elo"]))

            results = await asyncio.gather(*tasks)

        for (chat_id, nickname, prev_elo), elo in zip(player_map, results):
            if elo is not None and elo != prev_elo:
                if chat_id not in changed_chats:
                    changed_chats[chat_id] = []
                changed_chats[chat_id].append((nickname, elo, elo - prev_elo))
                data[chat_id][nickname]["elo"] = elo

        if changed_chats:
            save_players(data)
            for chat_id, changes in changed_chats.items():
                msg_lines = ["üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ELO:\n"]
                for i, (nickname, elo, change) in enumerate(sorted(changes, key=lambda x: x[1], reverse=True), start=1):
                    sign = "+" if change > 0 else ""
                    msg_lines.append(
                        f"{i}. {nickname} ‚Äî {elo} ({sign}{change})")
                try:
                    await app.bot.send_message(chat_id=int(chat_id), text="\n".join(msg_lines))
                except:
                    pass

        await asyncio.sleep(10)


# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ ELO –Ω–∞–ø—Ä—è–º—É—é –ø–æ player_id ====
async def get_elo_by_id(session, player_id):
    url = f"https://open.faceit.com/data/v4/players/{player_id}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}
    async with session.get(url, headers=headers) as resp:
        if resp.status != 200:
            return None
        data = await resp.json()
        return data.get("games", {}).get("cs2", {}).get("faceit_elo")

    # ==== –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ players.json ====


async def migrate_players():
    data = load_players()
    updated = False

    async with aiohttp.ClientSession() as session:
        for chat_id, players in list(data.items()):
            for nickname, value in list(players.items()):
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ä—ã–π (elo ‚Äî —á–∏—Å–ª–æ, –±–µ–∑ id)
                if isinstance(value, int):
                    print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ {nickname}...")
                    player_id, elo = await get_player_data(nickname, session)
                    if player_id:
                        data[chat_id][nickname] = {
                            "id": player_id,
                            "elo": elo if elo is not None else value
                        }
                        updated = True
                    else:
                        print(f"‚ö† –ò–≥—Ä–æ–∫ {nickname} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é.")

    if updated:
        save_players(data)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç.")


# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ player_id –∏ ELO (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏) ====
async def get_player_data(nickname, session=None):
    url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
    headers = {"Authorization": f"Bearer {FACEIT_API_KEY}"}

    own_session = False
    if session is None:
        session = aiohttp.ClientSession()
        own_session = True

    async with session.get(url, headers=headers) as resp:
        if resp.status != 200:
            if own_session:
                await session.close()
            return None, None
        data = await resp.json()

    cs2_data = data.get("games", {}).get("cs2")
    if not cs2_data:
        if own_session:
            await session.close()
        return None, None

    if own_session:
        await session.close()

    return data.get("player_id"), cs2_data.get("faceit_elo")


async def migrate_and_start():
    await migrate_players()

import nest_asyncio
nest_asyncio.apply()

async def main():
    await migrate_players()

    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("unregister", unregister))

    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

